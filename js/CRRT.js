// Generated by CoffeeScript 1.6.3
(function() {
  var CollapsibleRadialReingoldTilfordTree,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CollapsibleRadialReingoldTilfordTree = (function() {
    var CONTAINER, EDGE_LENGTH, click, collapse, diagonal, diameter, duration, height, i, root, selector, set_center, show, svg, tree, update, use_ids_as_names, width;

    function CollapsibleRadialReingoldTilfordTree() {
      this.show_tree_in = __bind(this.show_tree_in, this);
      this.import_mintree = __bind(this.import_mintree, this);
      this.collapse = __bind(this.collapse, this);
      this.init_tree = __bind(this.init_tree, this);
    }

    root = void 0;

    tree = void 0;

    EDGE_LENGTH = 50;

    CONTAINER = null;

    diameter = 300;

    svg = void 0;

    i = 0;

    duration = 350;

    width = 100;

    height = 100;

    diagonal = void 0;

    use_ids_as_names = false;

    selector = null;

    set_center = function(center_point) {
      root.x0 = center_point.x || center_point[0];
      return root.y0 = center_point.y || center_point[1];
    };

    update = function(source) {
      var link, links, node, nodeEnter, nodeExit, nodeUpdate, nodes;
      nodes = tree.nodes(root);
      links = tree.links(nodes);
      nodes.forEach(function(d) {
        return d.y = d.depth * EDGE_LENGTH;
      });
      node = svg.selectAll("g.node").data(nodes, function(d) {
        return d.id || (d.id = ++i);
      });
      nodeEnter = node.enter().append("g").attr("class", "node").on("click", click);
      nodeEnter.append("circle").attr("r", 1e-6).style("fill", function(d) {
        if (d._children) {
          return "lightsteelblue";
        } else {
          return "#fff";
        }
      });
      nodeEnter.append("text").attr("x", 10).attr("dy", ".35em").attr("text-anchor", "start").text(function(d) {
        return d.name;
      }).style("fill-opacity", 1e-6);
      nodeUpdate = node.transition().duration(duration).attr("transform", function(d) {
        return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")";
      });
      nodeUpdate.select("circle").attr("r", 4.5).style("fill", function(d) {
        if (d._children) {
          return "lightsteelblue";
        } else {
          return "#fff";
        }
      });
      nodeUpdate.select("text").style("fill-opacity", 1).attr("transform", function(d) {
        if (d.x < 180) {
          return "translate(0)";
        } else {
          return "rotate(180)translate(-" + (d.name.length + 50) + ")";
        }
      });
      nodeExit = node.exit().transition().duration(duration).remove();
      nodeExit.select("circle").attr("r", 1e-6);
      nodeExit.select("text").style("fill-opacity", 1e-6);
      link = svg.selectAll("path.link").data(links, function(d) {
        return d.target.id;
      });
      link.enter().insert("path", "g").attr("class", "link").attr("d", function(d) {
        var o;
        o = {
          x: source.x0,
          y: source.y0
        };
        return diagonal({
          source: o,
          target: o
        });
      });
      link.transition().duration(duration).attr("d", diagonal);
      link.exit().transition().duration(duration).attr("d", function(d) {
        var o;
        o = {
          x: source.x,
          y: source.y
        };
        return diagonal({
          source: o,
          target: o
        });
      }).remove();
      return nodes.forEach(function(d) {
        d.x0 = d.x;
        return d.y0 = d.y;
      });
    };

    click = function(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      return update(d);
    };

    collapse = function(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        return d.children = null;
      }
    };

    show = function(txt) {
      return d3.select('body').append('pre').text(txt);
    };

    CollapsibleRadialReingoldTilfordTree.prototype.init_tree = function(root) {
      console.log('init_tree', root);
      set_center([height / 2, 0]);
      this.collapse();
      return update(root);
    };

    CollapsibleRadialReingoldTilfordTree.prototype.collapse = function() {
      return root.children.forEach(collapse);
    };

    CollapsibleRadialReingoldTilfordTree.prototype.import_mintree = function(error, data) {
      if (error) {
        return console.warn(error);
      }
      if (data.name) {
        root = data;
      } else {
        use_ids_as_names = true;
        root = mintree2d3tree(data, {
          name: 'Edges',
          children: []
        }, use_ids_as_names);
      }
      return this.init_tree(root);
    };

    CollapsibleRadialReingoldTilfordTree.prototype.init_graphics = function() {
      CONTAINER = document.getElementById(selector);
      console.log("CONTAINER", CONTAINER);
      diameter = Math.max(500, Math.min(CONTAINER.getAttribute("clientHeight"), CONTAINER.getAttribute("clientWidth")));
      width = diameter;
      height = diameter;
      return svg = d3.select(CONTAINER).append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");
    };

    CollapsibleRadialReingoldTilfordTree.prototype.show_tree_in = function(data_url_or_tree, sel, use_ids) {
      var data_tree, data_url;
      selector = sel;
      if (!CONTAINER) {
        this.init_graphics();
      }
      if (typeof data_url_or_tree === typeof '') {
        data_url = data_url_or_tree;
        console.log('data_url', data_url);
      } else {
        data_tree = data_url_or_tree;
        console.log('data_tree', data_tree);
      }
      use_ids_as_names = use_ids || false;
      console.log('use_ids_as_names', use_ids_as_names);
      tree = d3.layout.tree().size([360, diameter / 2 - 80]).separation(function(a, b) {
        return (a.parent === b.parent ? 1 : 10) / a.depth;
      });
      diagonal = d3.svg.diagonal.radial().projection(function(d) {
        return [d.y, d.x / 180 * Math.PI];
      });
      if (data_url) {
        d3.json(data_url, this.import_mintree, function(err) {
          return alert(err);
        });
      } else {
        root = data_tree;
        this.init_tree(root);
      }
      return 'youch';
    };

    return CollapsibleRadialReingoldTilfordTree;

  })();

  (typeof exports === 'undefined' && window || exports).CollapsibleRadialReingoldTilfordTree = CollapsibleRadialReingoldTilfordTree;

}).call(this);
